package com.innopia.bist.bluetooth;

import android.Manifest;
import android.app.AlertDialog;
import android.app.Fragment;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.innopia.bist.util.ILogger;
import com.innopia.bist.R;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class BluetoothTestFragment_ extends Fragment {

    private static final String TAG = "BIST_BT_FRAGMENT";
    private static final int REQUEST_BLUETOOTH_PERMISSIONS = 101;
    private static final int REQUEST_ENABLE_BT = 102;
    // Standard UUID for Serial Port Profile (SPP). The target device must support this.
    private static final UUID SPP_UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");

    private ILogger logger;
    private TextView tvBluetoothInfo;
    private Button btnBluetoothScan;
    private Button btnBluetoothTest;

    private BluetoothAdapter bluetoothAdapter;
    private final ArrayList<BluetoothDevice> scannedDevicesList = new ArrayList<>();
    private BluetoothDevice selectedDevice;

    public static BluetoothTestFragment_ newInstance(ILogger logger) {
        BluetoothTestFragment_ fragment = new BluetoothTestFragment_();
        fragment.setLogger(logger);
        return fragment;
    }

    public void setLogger(ILogger logger) {
        this.logger = logger;
    }

    private void log(String message) {
        if (logger != null) {
            logger.log(TAG, message);
        }
    }

    // BroadcastReceiver to handle discovery events
    private final BroadcastReceiver discoveryReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (BluetoothDevice.ACTION_FOUND.equals(action)) {
                // Discovery has found a device. Get the BluetoothDevice
                // object and its info from the Intent.
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                if (device != null && device.getName() != null && !scannedDevicesList.contains(device)) {
                    scannedDevicesList.add(device);
                    log("Found device: " + device.getName() + " [" + device.getAddress() + "]");
                }
            } else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
                log("Bluetooth discovery finished.");
                if (getActivity() != null) {
                    getActivity().runOnUiThread(() -> {
                        tvBluetoothInfo.setText("Scan complete. " + scannedDevicesList.size() + " devices found.");
                        btnBluetoothScan.setEnabled(true);
                        showDiscoveredDevicesDialog();
                    });
                }
            }
        }
    };

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        // Register for broadcasts when a device is discovered and when discovery has finished
        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
        filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
        getActivity().registerReceiver(discoveryReceiver, filter);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_bluetooth_test, container, false);
        log("onCreateView called. Initializing Bluetooth Test Fragment.");

        tvBluetoothInfo = rootView.findViewById(R.id.text_bluetooth_info);
        btnBluetoothScan = rootView.findViewById(R.id.btn_bluetooth_scan);
        btnBluetoothTest = rootView.findViewById(R.id.btn_bluetooth_test);

        if (bluetoothAdapter == null) {
            tvBluetoothInfo.setText("Bluetooth is not supported on this device.");
            btnBluetoothScan.setEnabled(false);
            btnBluetoothTest.setEnabled(false);
            return rootView;
        }

        btnBluetoothScan.setOnClickListener(v -> {
            log("Scan button clicked.");
            startBluetoothDiscovery();
        });

        btnBluetoothTest.setOnClickListener(v -> {
            if (selectedDevice != null) {
                log("Bluetooth Test button clicked for device: " + selectedDevice.getName());
                performConnectionTest(selectedDevice);
            } else {
                Toast.makeText(getActivity(), "Please scan and select a device first.", Toast.LENGTH_SHORT).show();
                log("Test button clicked but no device selected.");
            }
        });

        updateInitialUIState();
        return rootView;
    }

    private void updateInitialUIState() {
        if (bluetoothAdapter.isEnabled()) {
            tvBluetoothInfo.setText("Bluetooth is ON. Ready to scan.");
        } else {
            tvBluetoothInfo.setText("Bluetooth is OFF. Please enable Bluetooth.");
        }
        btnBluetoothTest.setEnabled(false); // Disable test button until a device is selected
    }

    private void startBluetoothDiscovery() {
        if (!checkAndRequestPermissions()) {
            log("Permissions not granted. Cannot start scan.");
            return;
        }

        if (!bluetoothAdapter.isEnabled()) {
            log("Bluetooth is not enabled. Requesting to enable.");
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
            return;
        }

        if (bluetoothAdapter.isDiscovering()) {
            bluetoothAdapter.cancelDiscovery();
            log("Cancelled ongoing discovery to start a new one.");
        }

        scannedDevicesList.clear();
        selectedDevice = null;
        btnBluetoothTest.setEnabled(false);

        log("Starting Bluetooth discovery...");
        tvBluetoothInfo.setText("Scanning for devices...");
        btnBluetoothScan.setEnabled(false); // Disable scan button during scan
        bluetoothAdapter.startDiscovery();
    }

    private void showDiscoveredDevicesDialog() {
        if (scannedDevicesList.isEmpty()) {
            Toast.makeText(getActivity(), "No new devices found.", Toast.LENGTH_SHORT).show();
            log("No devices found to show in dialog.");
            return;
        }

        List<String> deviceNames = new ArrayList<>();
        for (BluetoothDevice device : scannedDevicesList) {
            deviceNames.add(device.getName() + "\n" + device.getAddress());
        }

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle("Select a Device")
                .setItems(deviceNames.toArray(new String[0]), (dialog, which) -> {
                    selectedDevice = scannedDevicesList.get(which);
                    log("Device selected: " + selectedDevice.getName());
                    String info = "Selected Device:\n" +
                            "Name: " + selectedDevice.getName() + "\n" +
                            "Address: " + selectedDevice.getAddress();
                    tvBluetoothInfo.setText(info);
                    btnBluetoothTest.setEnabled(true);
                });
        builder.create().show();
    }

    private void performConnectionTest(BluetoothDevice device) {
        tvBluetoothInfo.setText("Testing connection to " + device.getName() + "...");
        btnBluetoothTest.setEnabled(false);

        new Thread(() -> {
            if (bluetoothAdapter.isDiscovering()) {
                bluetoothAdapter.cancelDiscovery();
            }

            BluetoothSocket socket = null;
            try {
                // Create a socket and connect. This is a blocking call.
                if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
                    // This should not happen if the flow is correct, but as a safeguard.
                    log("BLUETOOTH_CONNECT permission missing for connection test.");
                    getActivity().runOnUiThread(() -> {
                        tvBluetoothInfo.append("\nTest Failed: Permission missing.");
                        btnBluetoothTest.setEnabled(true);
                    });
                    return;
                }
                socket = device.createRfcommSocketToServiceRecord(SPP_UUID);
                socket.connect();
                log("Connection successful to " + device.getName());

                // Update UI on the main thread
                getActivity().runOnUiThread(() -> {
                    tvBluetoothInfo.append("\nTest Result: SUCCESS (Connected)");
                    btnBluetoothTest.setEnabled(true);
                });

            } catch (IOException e) {
                log("Connection failed: " + e.getMessage());
                getActivity().runOnUiThread(() -> {
                    tvBluetoothInfo.append("\nTest Result: FAILED (" + e.getMessage() + ")");
                    btnBluetoothTest.setEnabled(true);
                });
            } finally {
                if (socket != null) {
                    try {
                        socket.close();
                    } catch (IOException e) {
                        log("Failed to close socket: " + e.getMessage());
                    }
                }
            }
        }).start();
    }

    private boolean checkAndRequestPermissions() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) { // Android 12+
            List<String> permissionsToRequest = new ArrayList<>();
            if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.BLUETOOTH_SCAN) != PackageManager.PERMISSION_GRANTED) {
                permissionsToRequest.add(Manifest.permission.BLUETOOTH_SCAN);
            }
            if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
                permissionsToRequest.add(Manifest.permission.BLUETOOTH_CONNECT);
            }
            if (!permissionsToRequest.isEmpty()) {
                log("Requesting Bluetooth permissions for Android 12+");
                requestPermissions(permissionsToRequest.toArray(new String[0]), REQUEST_BLUETOOTH_PERMISSIONS);
                return false;
            }
        } else { // Below Android 12
            if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                log("Requesting Fine Location permission for Bluetooth scan (pre-Android 12)");
                requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, REQUEST_BLUETOOTH_PERMISSIONS);
                return false;
            }
        }
        return true;
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_BLUETOOTH_PERMISSIONS) {
            boolean allGranted = true;
            for (int result : grantResults) {
                if (result != PackageManager.PERMISSION_GRANTED) {
                    allGranted = false;
                    break;
                }
            }
            if (allGranted) {
                log("All required permissions granted.");
                startBluetoothDiscovery(); // Retry scan after getting permissions
            } else {
                log("Permissions denied by user.");
                Toast.makeText(getActivity(), "Permissions are required for Bluetooth functionality.", Toast.LENGTH_LONG).show();
            }
        }
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        if (btnBluetoothScan != null) {
            btnBluetoothScan.requestFocus();
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        // Make sure we're not doing discovery anymore
        if (bluetoothAdapter != null) {
            if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.BLUETOOTH_SCAN) == PackageManager.PERMISSION_GRANTED) {
                if (bluetoothAdapter.isDiscovering()) {
                    bluetoothAdapter.cancelDiscovery();
                }
            }
        }
        // Unregister broadcast listeners
        getActivity().unregisterReceiver(discoveryReceiver);
        log("Fragment destroyed, discovery cancelled and receiver unregistered.");
    }
}
