@startuml

title BIST Application - Final MVVM Architecture

top to bottom direction

skinparam classAttributeIconSize 0
skinparam linetype ortho
skinparam packageStyle folder
skinparam roundCorner 20
skinparam arrowColor #666666
skinparam classBackgroundColor LightBlue

' === View Layer ===
package view <<Frame>> {
  class MainActivity {
    -mainViewModel: MainViewModel
    +showFragment(fragment: Fragment)
  }

  class WifiTestFragment
  class BluetoothTestFragment
  class RCU_TestFragment
}

' === ViewModel Layer ===
package viewmodel <<Node>> {
  class MainViewModel {
    +logLiveData: LiveData<List<String>>
    +testStatusesLiveData: LiveData<Map<TestType, Status>>
    +deviceInfoLiveData: LiveData<String>
  }

  abstract class BaseTestViewModel {
    +testResultLiveData: LiveData<String>
    +startManualTest()
  }

  class WifiTestViewModel extends BaseTestViewModel
  class BluetoothTestViewModel extends BaseTestViewModel
  class RCU_TestViewModel extends BaseTestViewModel
  class EthernetTestViewModel extends BaseTestViewModel
}

' === Model Layer ===
package model <<Database>> {
  interface Test {
    +runManualTest(params: Map, callback: (Result) -> Unit)
    +runAutoTest(callback: (Result) -> Unit)
  }



  ' Nested package for all test implementations
  package tests <<Folder>> {
    package wifi {
      class WifiTest implements Test
    }
    package bluetooth {
      class BluetoothTest implements Test
    }
    package rcu {
      class RCU_Test implements Test
    }
    package ethernet {
      class EthernetTest implements Test
    }
  }
}

' === Utility Layer ===
package util <<Folder>> {
  enum TestType
  enum Status

  ' LogRepository is moved here as a utility
  class LogRepository {
    +addLog(log: String)
    +getLogs(): List<String>
    +saveToFile()
  }

   class ConfigManager {
      +shouldStartAutoTest(): boolean
      +loadConfig(): Config
   }
}


' === Relationships ===
' View -> ViewModel
MainActivity --> MainViewModel
WifiTestFragment --> WifiTestViewModel
BluetoothTestFragment --> BluetoothTestViewModel
RCU_TestFragment --> RCU_TestViewModel

' Fragments use the shared MainViewModel
WifiTestFragment ..> MainViewModel : uses
BluetoothTestFragment ..> MainViewModel : uses
RCU_TestFragment ..> MainViewModel : uses

' Activity manages Fragments
MainActivity ..> WifiTestFragment : shows
MainActivity ..> BluetoothTestFragment : shows
MainActivity ..> RCU_TestFragment : shows


' ViewModel -> Model / Util
MainViewModel ..> LogRepository : uses
MainViewModel ..> ConfigManager : uses
BaseTestViewModel ..> MainViewModel : reports to

WifiTestViewModel o--> WifiTest
BluetoothTestViewModel o--> BluetoothTest
RCU_TestViewModel o--> RCU_Test
EthernetTestViewModel o--> EthernetTest

@enduml
